#!/usr/bin/env python3
## SPDX-License-Identifier: BSD-2-Clause
## Copyright (c) 2020, Konrad Weihmann

import glob
import json
import os
import pathlib
import subprocess
import sys


def get_tool_description(tool):
    res = []
    for f in glob.glob(os.path.join(os.path.dirname(__file__), "..", "recipes-dca", "*", "*", "*.sca.description")):
        _json = { "languages": [] }
        with open(f) as i:
            _json = json.load(i)
        name = pathlib.Path(f).parts[-3]
        if os.path.basename(f) == "{}.sca.description".format(tool):
            res.append((name, _json, tool))
        elif tool in _json["languages"]:
            toolname = os.path.basename(f).replace(".sca.description", "")
            res.append((name, _json, toolname))
    if res:
        return res
    raise Exception("[ERROR] No description found for {}".format(tool))

def test_integration(tmppath, recipe, tool, name):
    if "integration" not in tool["test"]:
        return
    subprocess.check_call(["bitbake", recipe, "-caddto_recipe_sysroot"], stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL)
    for item in tool["test"]["integration"]:
        if "env" in item:
            for env in item["env"]:
                os.environ[env["key"]] = env["value"] 
        try:
            subprocess.check_output(["oe-run-native", recipe, *item["cmd"]], stderr=subprocess.STDOUT)
        except subprocess.CalledProcessError as e:
            if e.returncode != item["returncode"]:
                for line in (e.stdout or b"").decode("utf-8").split("\n"):
                    sys.stderr.write(">> {}\n".format(line))
                raise e

def test_results(tmppath, recipe, tool, name):
    if "findings" not in tool["test"]:
        return
    for finding in tool["test"]["findings"]:
        hits = 0
        for f in glob.glob(os.path.join(tmppath, name, "datamodel", "*.dm")):
            with open(f) as i:
                cnt = json.load(i)
                if not cnt:
                    sys.stderr.write("[ERROR] No results found for {}@{}\n".format(name, finding))
                    for r in glob.glob(os.path.join(tmppath, name, "raw", "{}*".format(finding))):
                        with open(r) as o:
                            for line in o.readlines():
                                sys.stderr.write(">> {}\n".format(line.strip("\n"))) 
                    raise Exception("[ERROR] No results found for {}@{}\n".format(name, finding))
                else:
                    hits += sum(1 for x in cnt if x["PackageName"] == finding)
        if not hits:
            sys.stderr.write("[ERROR] No results found for {}@{}\n".format(name, finding))
            for r in glob.glob(os.path.join(tmppath, name, "raw", "{}*".format(finding))):
                with open(r) as o:
                    for line in o.readlines():
                        sys.stderr.write(">> {}".format(line.strip("\n"))) 
            raise Exception("[ERROR] No results found for {}@{}\n".format(name, finding))
        else:
            print("[OKAY] Found {} result for {}@{}".format(hits, name, finding))

if os.path.isabs(sys.argv[2]):
    _modsfile = sys.argv[2]
    with open(_modsfile) as i:
        _mods = [x.strip("\n") for x in i.readlines() if x]
else:
    _mods = sys.argv[2:]
ret = 0
for mod in _mods:
    try:
        for recipe, desc, name in get_tool_description(mod):
            test_integration(sys.argv[1], recipe, desc, name)
            test_results(sys.argv[1], recipe, desc, name)
    except Exception as e:
        sys.stderr.write(str(e) + "\n")
        ret = -1
sys.exit(ret)
